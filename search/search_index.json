{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ScholarShare","text":"<p>Welcome to ScholarShare, a web application developed by the ScrumTroops team to assist students in managing their financial needs and supporting student-driven fundraising campaigns. ScholarShare offers a range of features to empower students, promote financial literacy, and enhance the sense of community within educational institutions.</p>"},{"location":"#user-guide","title":"User Guide","text":"<ul> <li>Must be a student of UIU.</li> <li>Only university email will be eligible for registration.</li> <li>Individual accounts can post a loan request.</li> <li>Only club accounts can create donation post.</li> </ul>"},{"location":"#contact-and-support","title":"Contact and Support","text":"<ul> <li> <p>Mirza Abbas Uddin (muddin201315@bscse.uiu.ac.bd)</p> </li> <li> <p>Md. Hasibul Hasan Khan Shanto (mshanto201217@bscse.uiu.ac.bd)</p> </li> <li> <p>Sanjana Hossain Sonali (ssonali201423@bscse.uiu.ac.bd)</p> </li> <li> <p>Md. Mahadi Hasan Shanto (mshanto201082@bscse.uiu.ac.bd)</p> </li> <li> <p>Sagor Chandra Sutra Dhar (sdhar201344@bscse.uiu.ac.bd)</p> </li> </ul>"},{"location":"code/","title":"Architecture","text":""},{"location":"code/#mvt","title":"MVT","text":"<p>Our project leverages the Model-View-Template (MVT) architecture, a proven design pattern for building web applications. This approach promotes separation of concerns and leads to cleaner, more maintainable code. Here's a brief overview of each component:</p> <p>Model:</p> <ul> <li>Represents the data structure and business logic of the application.</li> <li>Defines the database schema through models, which are Python classes.</li> <li>Interacts with the database to perform CRUD (Create, Read, Update, Delete) operations.</li> </ul> <p>View:</p> <ul> <li>Handles the user interface and user input processing.</li> <li>Retrieves data from the Model and passes it to the Template.</li> <li>Contains the application's business logic related to user interactions.</li> </ul> <p>Template:</p> <ul> <li>Defines the presentation layer and the structure of the output.</li> <li>Uses Django's template language to dynamically generate HTML.</li> <li>Receives data from the View and renders it for display to the user.</li> </ul> <p></p>"},{"location":"code/#some-main-functionalities-of-our-project","title":"Some main functionalities of our project","text":""},{"location":"code/#user-account-management","title":"User account management","text":"<p>Confirm registration by emeil verification. <pre><code>def confirm_registration(request,uidb64,token):\n    try:\n        uid = force_str(urlsafe_base64_decode(uidb64))\n        user = User.objects.get(pk=uid)\n    except (TypeError,ValueError,OverflowError,User.DoesNotExist):\n        user = None\n\n    if user is not None and generate_token.check_token(user,token):\n        user.is_active = True\n        user.save()\n        login(request,user)\n        messages.error(request, \"Your Account has been activated!!\")\n        return redirect('login')\n    else:\n        return render(request,'activation_failed.html')\n</code></pre> Make sure user is logged in <pre><code>def user_exists(view_func):\n    def _wrapped_view(request, *args, **kwargs):\n        username = request.user.username\n        try:\n            user = NewUser.objects.get(username=username)\n        except NewUser.DoesNotExist:\n            user = None\n            messages.error(request, \"You have been logged out successfully!\")\n            return redirect('welcoming_page')\n        return view_func(request, user=user, *args, **kwargs)\n\n    return _wrapped_view\n</code></pre></p>"},{"location":"code/#posting","title":"Posting","text":"<p>Post for loan</p> <p>Model <pre><code>class LoanRequest(models.Model):\n    loan_postid = models.AutoField(primary_key=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    loan_post = models.CharField(max_length=500)\n    loan_amount = models.FloatField(default=0)\n    loan_postimage = models.ImageField(upload_to='Files/LoanPost/')\n    isactive = models.BooleanField(default=True)\n    userid = models.ForeignKey(NewUser, on_delete=models.CASCADE)\n    transaction_happen = models.BooleanField(default=False)\n\n    def __str__(self):\n        return f\"LoanPost {self.loan_postid} by {self.userid}\"\n</code></pre> View <pre><code>def create_loan_post(request, user):\n    if request.method == 'POST':\n        post_content = request.POST.get('post')\n        amount = request.POST.get('amount')\n        post_image = request.FILES.get('post_image')\n\n        if post_content and amount:\n            loan_post = LoanRequest.objects.create(\n                loan_post=post_content,\n                loan_amount=amount,\n                loan_postimage=post_image,\n                userid=user\n            )\n            loan_post.save()\n            messages.error(request, \"Loan post created successfully!\")\n            return redirect('core_home')\n        else:\n            messages.error(request, \"Error creating loan post. Please fill in all required fields.\")\n            return redirect('core_home')\n\n    return redirect('core_home')\n</code></pre> Post for donation</p> <p>Model <pre><code>class DonationRequest(models.Model):\n    donation_postid = models.AutoField(primary_key=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    donation_post = models.CharField(max_length=500)\n    donation_amount = models.FloatField(default=0)\n    donation_postimage = models.ImageField(upload_to='Files/DonationPost/')\n    isactive = models.BooleanField(default=True)\n    userid = models.ForeignKey(NewUser, on_delete=models.CASCADE)\n    transaction_happen = models.BooleanField(default=False)\n\n    def __str__(self):\n        return f\"DonationPost {self.donation_postid} by {self.userid}\"\n</code></pre> View <pre><code>def create_donation_post(request, user):\n    if request.method == 'POST':\n        post_content = request.POST.get('post')\n        amount = request.POST.get('amount')\n        post_image = request.FILES.get('post_image')\n        if post_content and amount:\n            donation_post = DonationRequest.objects.create(\n                donation_post=post_content,\n                donation_amount=amount,\n                donation_postimage=post_image,\n                userid=user\n            )\n            donation_post.save()\n            messages.error(request, \"Donation post created successfully!\")\n            return redirect('core_home')\n        else:\n            messages.error(request, \"Error creating donation post. Please fill in all required fields.\")\n            return redirect('core_home')\n    else:\n        return redirect('core_home')\n</code></pre></p>"},{"location":"code/#add-balance","title":"Add Balance","text":"<p>Model <pre><code>class AddBalance(models.Model):\n    created_at = models.DateTimeField(auto_now_add=True)\n    account_id = models.AutoField(primary_key=True)\n    user = models.ForeignKey(NewUser, on_delete=models.CASCADE)\n    available_balance = models.FloatField(default=0.00)\n    is_first_transaction = models.BooleanField(default=True)\n\n    def __str__(self):\n        return f'Balance {self.available_balance} of {self.user.userid}'\n</code></pre></p> <p>View <pre><code>def core_statistics(request, user):\n    if request.method == 'POST':\n        phone = float(request.POST.get('phone'))\n        amount = float(request.POST.get('amount', 0))\n        add_balance, created = AddBalance.objects.get_or_create(user=user, is_first_transaction=True)\n\n        if not created:\n            add_balance.available_balance += amount\n            add_balance.is_first_transaction = False\n        else:\n            add_balance.available_balance = amount\n\n        add_balance.save()\n        messages.error(request, f\"Balance Added Successfully From the Number {phone} !!\")\n    available_balance = AddBalance.objects.all()\n    return render(request, 'core/statistics.html', {'user': user,'available_balance':available_balance})\n</code></pre></p>"},{"location":"code/#donation","title":"Donation","text":"<p>Model <pre><code>class AddDonation(models.Model):\n    donation_id = models.AutoField(primary_key=True)\n    donated_to = models.ForeignKey(NewUser, on_delete=models.CASCADE, related_name='donations_received')\n    donation_post = models.ForeignKey(DonationRequest, on_delete=models.CASCADE, related_name='donations')\n    donated_user = models.ForeignKey(NewUser, on_delete=models.CASCADE, related_name='donations_made')\n    amount = models.FloatField(default=0.00)\n    wish = models.CharField(max_length=200)\n\n    def __str__(self) -&gt; str:\n         return f'{self.donated_user.userid} donated {self.amount}'\n</code></pre></p> <p>View <pre><code>if add_balances.exists():\n            latest_add_balance = add_balances.first()\n\n            if latest_add_balance.available_balance &gt;= amount:\n\n                add_donation = AddDonation(\n                    donated_to=donated_to_user,\n                    donation_post=donation_post,\n                    donated_user=donated_user,\n                    amount=amount,\n                    wish=wish,\n                )\n                add_donation.save()\n\n                latest_add_balance.available_balance -= amount\n                latest_add_balance.save()\n                messages.error(request, \"Thanks for your donation, check other posts.\")\n</code></pre></p>"},{"location":"code/#comment","title":"Comment","text":"<pre><code>class Message(models.Model):\n    name = models.CharField(max_length=50)\n    email = models.EmailField(max_length=100)\n    comment = models.TextField(max_length=300)\n\n\n    def __str__(self):\n        return f\"From {self.name}\"\n</code></pre>"},{"location":"code/#reporting","title":"Reporting","text":"<pre><code>class Report(models.Model):\n    report_at = models.DateTimeField(auto_now_add=True)\n    report_from = models.ForeignKey(NewUser, on_delete=models.CASCADE, related_name='reports_sent')\n    report_to = models.ForeignKey(NewUser, on_delete=models.CASCADE, related_name='reports_received')\n    report_reason = models.CharField(max_length=50)\n    short_description = models.CharField(max_length=200)\n\n    def __str__(self):\n        return f\"{self.report_from.userid} reported {self.report_to.userid}\"\n</code></pre>"},{"location":"features/","title":"Features","text":"<ul> <li>Registration: Easy and secure user registration for students and organizations.</li> <li>Customizable User Profiles: Personalize your profile with images, bios.</li> <li>Loan Posting &amp; Campaign Creation: Submit loan requests and create fundraising campaigns with ease.</li> <li>Commenting: Engage with the community by leaving comments and feedback.</li> <li>Reporting: Flag inappropriate content or behavior to ensure a safe and respectful environment.</li> <li>Messaging: Connect with other users, loan applicants, or campaign creators via the messaging system.</li> <li>Transaction: Track and manage financial transactions securely within the platform.</li> <li>Credit Balance Tracking: Monitor your credit balance and improve your financial health.</li> </ul>"},{"location":"features/#technology-stack","title":"Technology Stack","text":"<ul> <li>Frontend Framework: Bootstrap 5.0</li> <li>Backend Framework: Django</li> <li>Database: MySQL</li> <li>Version Control and Repository System: Git &amp; Github</li> <li>Project Management Tool: Jira</li> <li>Methodology: Agile (Scrum)</li> </ul>"},{"location":"prototype/","title":"Prototype","text":""},{"location":"prototype/#welcoming-page","title":"Welcoming page","text":""},{"location":"prototype/#contact-us","title":"Contact us","text":""},{"location":"prototype/#faq","title":"FAQ","text":""},{"location":"prototype/#home-page","title":"Home page","text":""},{"location":"prototype/#user-profile","title":"User Profile","text":"<p>Induvidual </p> <p>Club </p>"},{"location":"prototype/#posting","title":"Posting","text":""},{"location":"prototype/#statistics","title":"Statistics","text":""},{"location":"prototype/#about-us","title":"About Us","text":""},{"location":"team/","title":"Team - ScrumTroops","text":"<ul> <li>Mirza Abbas Uddin</li> <li>Md. Hasibul Hasan Khan Shanto</li> <li>Sanjana Hossain Sonali</li> <li>Md. Mahadi Hasan Shanto</li> <li>Sagor Chandra Sutra Dhar</li> </ul>"}]}